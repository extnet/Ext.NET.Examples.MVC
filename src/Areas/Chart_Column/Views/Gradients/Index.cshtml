@model List<Ext.Net.MVC.Examples.ChartModel>

@{
    ViewBag.Title = "Column Chart Gradients - Ext.NET MVC Examples";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
    var X = Html.X();

    var gradientCount = 0;
}

@functions
{
    private LinearGradient makeGradient(string id, string stop0Rgb, string stop1Rgb)
    {
        var X = Html.X();
        return X.LinearGradient()
            .GradientID(id)
            .Degrees(0)
            .Stops(stops =>
            {
                stops.Add(X.GradientStop()
                    .Offset(0)
                    .Color("rgb(" + stop0Rgb + ")")
                );

                stops.Add(X.GradientStop()
                    .Offset(100)
                    .Color("rgb(" + stop1Rgb + ")")
                );
            });
    }

    private Tuple<string, string> rgbPair(string a, string b)
    {
        return new Tuple<string, string>(a, b);
    }
}

@section headtag
{
     <script>
        var saveChart = function (btn) {
            Ext.MessageBox.confirm('Confirm Download', 'Would you like to download the chart as an image?', function (choice) {
                if (choice === 'yes') {
                    btn.up('panel').down('chart').download();
                }
            });
        };
    </script>
}

@section example
{
    <h1>Column Chart Sample</h1>

    <p>Display a sets of random data in a column series. Reload data will randomly generate a new set of data in the store.</p>
    @(X.Panel()
        .Width(800)
        .Height(600)
        .Layout("fit")
        .TopBar(X.Toolbar()
            .Items(
                X.Button()
                    .Text("Reload Data")
                    .Icon(Icon.ArrowRefresh)
                    .Handler("App.Store1.reload();"),

                X.Button()
                    .Text("Save Chart")
                    .Icon(Icon.Disk)
                    .Handler("saveChart")
            )
        )
        .Items(X.CartesianChart()
            .AnimationConfig(new AnimConfig() { Easing = Easing.BounceOut, Duration = 750 })
            .Store(X.Store()
                .ID("Store1")
                .Data(Model)
                .Model(X.Model().Fields("Name", "Data1"))
                .ServerProxy(X.AjaxProxy().Url(Url.Action("GetData")))
            )

            .Gradients(gr =>
            {
                var count = 1;
                foreach (var rgbTuple in new List<Tuple<string, string>>()
                {
                    rgbPair("212, 40, 40", "117, 14, 14"),
                    rgbPair("180, 216, 42", "94, 114, 13"),
                    rgbPair("43, 221, 115", "14, 117, 56"),
                    rgbPair("45, 117, 226", "14, 56, 117"),
                    rgbPair("187, 45, 222", "85, 10, 103")
                })
                {
                    gr.Add(makeGradient("v-" + count++, rgbTuple.Item1, rgbTuple.Item2));
                }
            })

            .Axes(
                X.NumericAxis()
                    .Position(Position.Left)
                    .Fields("Data1")
                    .GridConfig(X.AxisGrid()
                        .Odd(X.Sprite().StrokeStyle("#555"))
                        .Even(X.Sprite().StrokeStyle("#555"))
                    )
                    .Maximum(100)
                    .Minimum(0)
                    .Title("Number of Hits")
                    .Renderer(r => r.Handler="return Ext.util.Format.number(label, '0,0');"),
                X.CategoryAxis()
                    .Fields("Name")
                    .Position(Position.Bottom)
                    .Title("Month of the Year")
            )

            .Series(X.BarSeries()
                .Highlight(true)
                .Label(X.ChartLabel()
                    .Display(SeriesLabelDisplay.InsideEnd)
                    .Field("Data1")
                    .Orientation(Orientation.Horizontal)
                    .FillStyle("#000")
                    .Font("17px Arial")
                    .TextAlign(TextSpriteAlign.Center)
                    .Renderer(r => r.Handler = "return Ext.util.Format.number(text, '0');")
                )
                .Renderer(MvcUtils.StringifyScriptBlock(@<text><script type="text/javascript">
                    var colors = ['url(#v-1)', 'url(#v-2)', 'url(#v-3)', 'url(#v-4)', 'url(#v-5)'];
                    return {
                        fill: colors[index % colors.length]
                    };
                </script></text>))
                .StyleSpec(X.Sprite().Opacity(0.95))
                .XField("Name")
                .YField("Data1")
            )
        )
    )
}